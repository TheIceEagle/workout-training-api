package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"log/slog"
	"time"
	"workout-training-api/internal/graphql/graph/model"
	"workout-training-api/pkg/httputils/request"
)

// CreateWorkout is the resolver for the createWorkout field.
func (r *mutationResolver) CreateWorkout(ctx context.Context, name string, description string, exercises []*model.ExerciseInput, status string, scheduledDate []time.Time) (bool, error) {
	log := r.logger.With("method", "CreateWorkout")

	reqBody := request.NewCtrlCreateWorkoutRequest(name, description, exercises, status, scheduledDate)
	_, err := r.ctrl.CreateWorkout(ctx, reqBody)
	if err != nil {
		log.ErrorContext(ctx, "fail", slog.Any("error", err))
		return false, err
	}

	log.InfoContext(
		ctx,
		"success",
	)
	return true, nil
}

// DeleteWorkout is the resolver for the deleteWorkout field.
func (r *mutationResolver) DeleteWorkout(ctx context.Context, workoutID string) (bool, error) {
	log := r.logger.With("method", "CreateWorkout")

	reqBody := request.NewCtrlDeleteWorkoutRequest(workoutID)
	_, err := r.ctrl.DeleteWorkout(ctx, reqBody)
	if err != nil {
		log.ErrorContext(ctx, "fail", slog.Any("error", err))
		return false, err
	}

	log.InfoContext(
		ctx,
		"success",
	)
	return true, nil
}

// UpdateWorkout is the resolver for the updateWorkout field.
func (r *mutationResolver) UpdateWorkout(ctx context.Context, workout *model.WorkoutInput) (bool, error) {
	log := r.logger.With("method", "UpdateWorkout")

	reqBody := request.NewCtrlUpdateWorkoutRequest(workout)
	_, err := r.ctrl.UpdateWorkout(ctx, reqBody)
	if err != nil {
		log.ErrorContext(ctx, "fail", slog.Any("error", err))
		return false, err
	}

	log.InfoContext(
		ctx,
		"success",
	)
	return true, nil
}

// ListWorkouts is the resolver for the listWorkouts field.
func (r *queryResolver) ListWorkouts(ctx context.Context, userID string) ([]*model.Workout, error) {
	log := r.logger.With("method", "ListWorkouts")

	reqBody := request.NewCtrlListWorkoutsRequest(userID)
	listResp, err := r.ctrl.ListWorkouts(ctx, reqBody)

	if err != nil {
		log.ErrorContext(ctx, "fail", slog.Any("error", err))
		return nil, err
	}

	workouts := make([]*model.Workout, len(listResp.GetWorkouts()))
	for i := range listResp.GetWorkouts() {
		workouts[i] = &model.Workout{
			ID:            "",
			Name:          "",
			Description:   "",
			Exercises:     nil,
			ScheduledDate: nil,
		}
	}

	log.InfoContext(ctx, "success", slog.Int("workout_count", len(workouts)))

	return workouts, nil
}
