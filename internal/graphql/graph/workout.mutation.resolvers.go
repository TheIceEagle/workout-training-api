package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"
	"log/slog"
	"time"
	"workout-training-api/internal/graphql/graph/model"
	"workout-training-api/pkg/httputils/request"
)

// Repetitions is the resolver for the repetitions field.
func (r *exerciseResolver) Repetitions(ctx context.Context, obj *model.Exercise) (int32, error) {
	panic(fmt.Errorf("not implemented: Repetitions - repetitions"))
}

// Sets is the resolver for the sets field.
func (r *exerciseResolver) Sets(ctx context.Context, obj *model.Exercise) (int32, error) {
	panic(fmt.Errorf("not implemented: Sets - sets"))
}

// Weight is the resolver for the weight field.
func (r *exerciseResolver) Weight(ctx context.Context, obj *model.Exercise) (float64, error) {
	panic(fmt.Errorf("not implemented: Weight - weight"))
}

// CreateWorkout is the resolver for the createWorkout field.
func (r *mutationResolver) CreateWorkout(ctx context.Context, name string, description string, exercises []*model.ExerciseInput, scheduledTime time.Time) (bool, error) {
	log := r.logger.With("method", "CreateWorkout")

	reqBody := request.NewCtrlCreateWorkoutRequest(name, description, exercises, scheduledTime)
	_, err := r.ctrl.CreateWorkout(ctx, reqBody)
	if err != nil {
		log.ErrorContext(ctx, "fail", slog.Any("error", err))
		return false, err
	}

	log.InfoContext(
		ctx,
		"success",
	)
	return true, nil
}

// DeleteWorkout is the resolver for the deleteWorkout field.
func (r *mutationResolver) DeleteWorkout(ctx context.Context, workoutID string) (bool, error) {
	log := r.logger.With("method", "CreateWorkout")

	reqBody := request.NewCtrlDeleteWorkoutRequest(workoutID)
	_, err := r.ctrl.DeleteWorkout(ctx, reqBody)
	if err != nil {
		log.ErrorContext(ctx, "fail", slog.Any("error", err))
		return false, err
	}

	log.InfoContext(
		ctx,
		"success",
	)
	return true, nil
}

// ListWorkouts is the resolver for the listWorkouts field.
func (r *queryResolver) ListWorkouts(ctx context.Context) ([]*model.Workout, error) {
	panic(fmt.Errorf("not implemented: ListWorkouts - listWorkouts"))
}

// ScheduledTimes is the resolver for the scheduledTimes field.
func (r *workoutResolver) ScheduledTimes(ctx context.Context, obj *model.Workout) (int32, error) {
	panic(fmt.Errorf("not implemented: ScheduledTimes - scheduledTimes"))
}

// Exercise returns ExerciseResolver implementation.
func (r *Resolver) Exercise() ExerciseResolver { return &exerciseResolver{r} }

// Workout returns WorkoutResolver implementation.
func (r *Resolver) Workout() WorkoutResolver { return &workoutResolver{r} }

type exerciseResolver struct{ *Resolver }
type workoutResolver struct{ *Resolver }
